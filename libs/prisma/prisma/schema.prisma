// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
      provider = "prisma-client-js"
}

datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
}

enum Role {
  VOTER
  ADMIN
}

model User {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    role Role @default(VOTER)

    ssn String? @unique
    firstName String
    lastName String
    street String
    postalCode Int
    city String

    // voter
    registered RegisteredVoter[]

    // admin
    serviceNumber Int? @unique
    elections Election[]

    email String @unique
    hash String

    @@map("users")
}

model RegisteredVoter {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    electionId Int
    election Election? @relation(fields: [electionId], references: [id], onDelete: Cascade)

    @@map("registeredVoters")
}

model EligibleVoter {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    electionId Int
    election Election? @relation(fields: [electionId], references: [id], onDelete: Cascade)

    ssn String? @unique
    wallet String? @unique

    @@map("eligibleVoters")
}

model Election {
    id Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    adminId Int
    admin User @relation(fields: [adminId], references: [id], onDelete: SetNull)

    name String
    image String
    description String

    candidates Json

    contract String
    eligibleVoters EligibleVoter[]
    registeredVoters RegisteredVoter[]
    expires DateTime

    @@map("elections")
}

